package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unsafe"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _server_crt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x94\x4b\xb3\xaa\x38\x14\x85\xe7\xfc\x8a\x9e\x53\x5d\x02\x22\xca\xe0\x0e\x12\x08\x01\x15\x24\x3c\x82\x32\xe3\x25\x20\x08\x22\xf2\xc8\xf9\xf5\x7d\xce\xbd\x55\x3d\xe9\xce\x28\xf5\xad\xaa\x35\xd8\x7b\xed\xf5\xf7\xcf\x83\x08\x5b\xce\x5f\x1a\xf2\x02\xcb\xb0\x34\x10\xa0\xdf\x94\xb3\x2d\x4b\x87\x0f\x4d\x03\x85\xac\x69\x44\xef\xd7\x49\xda\x28\x6c\x67\x2d\x0f\xe0\xc0\xb2\x19\xaa\xa6\xc6\xea\x22\x40\x40\x46\x03\xe8\xd0\xb0\xc9\xb8\x68\xe4\xa6\x53\x42\x30\x5a\x8e\x90\xa3\x01\x0a\xec\x6f\x73\x20\x86\x48\x03\xcb\x29\x94\xd4\x4f\xec\x8b\x41\x8e\x0d\x21\x0e\x50\x65\xc3\xc3\x1f\xad\x5c\x6e\x7e\xb4\x13\xe2\xeb\x71\x8a\xaf\xa4\xa4\x52\xdb\xc4\x52\x2b\x70\x19\x83\x24\x37\x9b\x32\x30\xbd\xc6\x86\xf2\x55\x0f\x90\x68\xeb\xf6\x7a\x09\xac\xc5\xd1\x6d\xe6\xd0\xfe\x87\x49\xbf\x99\xfe\x2f\x5b\xbc\x00\x9d\x6d\xd0\x60\xee\xc7\x1d\x56\xb6\x46\x68\xb8\xa2\x2f\xe0\xc1\xd2\xa1\x10\x94\xb6\xd6\x3a\x73\x1a\x85\x9f\x70\xeb\x55\x39\x0e\x57\x2b\x00\xf7\x3f\x5a\x6f\x63\xd4\x4e\x39\xa6\x2c\x7d\x52\x81\xb3\x8c\xfc\x15\xe3\xfc\x95\x9b\x76\x19\x9a\xde\xce\x42\xab\x10\xeb\xdf\x33\xf1\xad\x45\x27\xb7\xe3\xa9\x8f\xad\x6a\xce\x1c\x40\x10\x84\x04\xe8\x65\x89\x5c\xf0\xa3\x93\x5e\xfb\xfe\x43\x0e\x9c\x79\x55\xf8\xb4\xae\xd2\x93\xcf\xe9\x95\x38\x54\x07\x07\xb9\x39\x67\xdd\xba\x9d\x94\x76\x04\xb2\x9d\x87\xe4\x64\x9e\x33\x5d\x74\xc4\x48\x1a\xd5\x63\xc8\x0b\xf7\x61\xae\xe0\x45\x0f\xf8\x93\xc7\x5d\x95\xcb\x61\x79\x63\xab\xba\x80\xd9\xda\x57\x2b\x78\x63\xf1\x76\x56\xbf\xb2\x7c\xf6\x37\x3a\xd3\xf2\x65\xb3\x2b\x82\x62\x53\x45\x7e\x0c\xdf\x92\x36\xcc\xf7\xf8\x54\x8d\x75\xf7\x7c\xea\x4f\x41\x49\xb8\x44\xb9\x77\xb6\xd2\xf1\x7e\xe3\xdf\x5a\xe3\x60\xdf\x63\x08\x02\xc5\x68\x95\x9d\x6f\xbc\x74\xbd\xbd\x2a\xa3\x9b\x98\x4c\x95\x85\xfd\x5a\xc1\x2e\xcd\x1a\x9a\xd5\x65\x43\x63\x79\x3c\x1c\xe9\x4a\xb9\xb2\x1f\x6d\x11\xf1\xdd\x73\xe8\x23\xeb\x72\xf5\x2e\xab\xf9\xb6\x92\x8c\x79\xb8\x26\xe9\xd0\xde\x1f\x83\x51\xf7\xc9\xd1\x4d\xeb\xcf\xcd\x2e\x72\xec\x97\xf3\x1e\x19\x91\x71\xb3\xf8\xfa\x30\x3f\x43\xce\xdf\xe1\x3e\x99\x07\xbc\xee\x9a\xcd\x96\xd4\x22\x3c\xc9\x9b\x1d\x09\x1f\x31\xf6\x79\xaf\x06\xe4\xcc\xbb\xb5\xb3\x3e\x45\xda\x92\x90\xd0\x02\xbc\x00\xbf\x4a\xd3\x0c\x99\x7d\xd8\x1c\xa6\x39\xe7\x78\x6a\x76\x2a\x7d\x6d\xfd\xaf\xc2\xb4\x78\xc7\xc1\x6c\x56\x98\x99\x7d\x67\x0a\x01\x10\xfc\x4f\x1a\xc1\xe5\x7b\x03\x08\xf4\x81\x3a\xbb\x0a\x4c\xb8\xe3\xc4\xf7\x5f\xc1\xcd\x1c\xd3\xfa\x1c\x4f\xd1\x24\xc8\xda\x7b\xd8\xfb\x0e\xbc\x95\x86\x17\x7e\x86\x82\xb0\x39\x55\xaf\xe4\xe2\x1d\xfc\x9b\xda\x98\x45\x6f\x79\xf6\xae\xcb\x36\x12\xeb\x30\x49\x75\xce\xca\x84\x4e\x78\xd5\x5d\x8f\x3f\x51\x4e\xe7\x1e\x6f\xeb\x37\x5a\x0e\xa7\xb4\x0a\x50\x9b\x1f\x1f\xc5\x35\x88\x4f\x1f\x9d\xe7\x25\xa6\xa1\xc6\xe3\xd7\x58\x29\x8a\x69\x9f\x6d\x6b\x55\x84\xfb\xbd\xc9\xe1\x09\x69\xc6\xe3\x9a\xd3\x30\x01\xb1\x6b\xbc\x56\x03\x1e\x22\x69\xdf\xb6\x77\xfc\x45\x24\xf2\x8e\x70\xbd\xee\x63\x99\x6d\x4f\xdd\xa8\x40\x94\xf8\xbc\xe6\xde\x13\x83\xa5\x44\x5c\x1e\xf5\xbe\xe0\x3c\x15\xf5\xf5\x15\xec\x70\x6d\xcd\x8b\x61\x24\x6b\x93\x4a\x8f\x47\x74\xdc\x3f\x37\x48\x56\x91\xb2\x31\x00\xc4\x6b\x71\x3c\x36\x10\xb9\x72\x26\xf5\xe7\x97\x74\x5e\x20\x4b\xc0\x86\x31\x51\xce\xb8\xbb\xbb\x5b\x2a\xa6\xde\xb4\x8f\xf1\xc4\xda\xdb\xd5\x5e\x8e\xed\xa9\xf6\xf7\x65\xbe\x68\x39\x6a\xee\x2c\xf1\x43\xc1\xe8\xa0\xb0\xe7\xc2\xfc\x22\x48\x2a\xd4\x6d\xcb\x4c\xf5\xda\xfe\x74\x3f\x3f\x27\xce\x0f\x2e\x2e\x9d\xf1\x18\xa6\x7e\x94\x83\x5f\xbf\xb8\xdf\x35\x81\x1c\xfd\xbf\xd5\xf1\x4f\x00\x00\x00\xff\xff\x7e\xd8\x7a\x0d\x57\x04\x00\x00"

func server_crt_bytes() ([]byte, error) {
	return bindata_read(
		_server_crt,
		"server.crt",
	)
}

func server_crt() (*asset, error) {
	bytes, err := server_crt_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "server.crt", size: 1111, mode: os.FileMode(420), modTime: time.Unix(1426797805, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _server_csr = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\xc9\x0e\xaa\xc0\x12\x86\xf7\x3c\xc5\xd9\x93\x1b\x40\x65\x5a\x36\x53\xd3\x32\x68\xd3\x34\x28\x3b\x14\x91\x51\x64\x14\x7c\xfa\xeb\x39\x77\x7d\x6b\x55\xc9\x57\x49\x25\x55\xff\xf7\x9f\xbf\xa5\x99\x10\xf9\x7f\x74\x33\x08\x91\x85\x74\x10\x9a\x7f\x02\x13\x53\x93\x84\xff\x28\xe3\x21\xa4\x97\x95\xae\x83\xcb\x0f\x62\xf0\x09\x42\xd3\xf5\x40\x0d\x81\x40\x4d\xad\xf0\x74\x1c\xd1\xd5\xfc\x82\x40\x7b\xfa\x91\x06\x9e\x9e\xde\xf8\xcb\x2d\xa6\x13\xdd\x07\x45\x06\xe9\xca\xa0\x10\xe4\xff\x83\x9d\x07\xcd\x66\xce\x60\xb4\xdd\xda\x88\x47\x56\xf6\x4e\x60\xf6\xce\x6c\xef\x49\xed\x40\x44\xe6\xca\x27\xc6\x6f\x11\x41\x1f\x03\x5f\x8f\x4e\x97\xa0\x62\xb9\xfb\x0c\xc0\xa6\xa6\x61\x60\x3c\x9f\xe6\x19\xfc\x1d\xc0\x9d\xfe\xeb\x35\xe0\xb2\x2a\x3f\x35\x67\xa9\xc3\x93\xf3\x4e\xfd\xc8\x00\xca\xa1\x76\xef\xaf\x75\x3f\x4b\xcd\x08\x0e\x5e\x46\xb1\x63\xbb\xcc\xdd\x10\x7c\x21\xde\x8d\xea\x91\xb2\x7c\xde\x2f\x85\x76\x32\x42\xd6\x09\x2e\xd2\x49\xf9\x0c\x10\x15\x27\xb0\x20\xb9\x58\xc1\x00\x85\xab\xab\x7e\xef\xd9\x42\x38\x63\xd3\xb3\x0f\x27\x3e\xc2\x07\xc7\x14\x31\x49\xb4\x61\xa7\xf7\x4b\x9e\x38\xc5\x58\xbe\xda\xd6\x68\x79\x29\x4d\xa5\xfc\xe5\x49\x2f\x96\xd4\xe4\xda\x58\x8a\x97\x27\x1a\x08\x25\xab\x91\x44\x62\xbd\x0d\xa3\xb9\x48\xe3\x39\xb5\x37\x95\x39\xf0\xf2\x5a\x68\xaf\xdb\xbd\x8e\xee\xe5\xb3\x8e\x92\xc3\xa8\x1c\xa3\x35\x7a\x76\xa3\x27\x98\xec\xab\xed\xbb\x18\x9d\x2e\xc1\x69\xb5\x07\x94\xde\xb7\x00\x96\xf8\xd6\x37\x79\xd5\x5b\x65\x97\x1e\xcf\xcc\xad\x9c\xae\xde\x23\x83\xe4\xb9\xc8\xa6\x15\x5b\x57\xc4\x96\xca\xd2\x52\x22\xc2\x2e\x5d\x7a\xb8\x8a\x35\xb7\xc7\xa5\xa0\x39\x07\x4e\xc4\xb4\x4a\x20\x61\x83\x12\x60\x97\x3d\x97\xfe\xda\x0a\x4c\xd4\x60\x8a\xa3\x07\x78\x03\x76\xdd\xcd\x8b\xb6\x79\x0a\xa7\xcc\x4b\xc6\x46\xf6\x4b\x8d\xde\x7b\xf2\x7d\xd8\x88\xf5\x7d\xb8\x2d\xd2\x66\xdf\x75\xf0\x31\x01\x48\x01\xf0\x00\x0f\x75\xd2\x43\x86\xa0\xdb\xde\xf8\x7d\x42\xff\x50\x00\x0e\x48\x03\x58\xbf\x63\xa5\xa4\x5c\xfe\xbd\x0d\x7d\x42\x7d\x8e\x80\xfc\x2e\x00\xb9\x92\x1f\x89\xf7\xbe\x71\x85\x19\xc4\x76\x28\x80\xaa\x97\xf9\x31\x3a\x31\xb2\xa4\x0f\x0e\x1d\xfd\xce\x15\xa4\xb6\x27\x5f\xfe\x97\x11\xd7\xb5\xf7\x95\x75\xb9\x42\xd7\x1f\x26\xb3\xc5\xf3\x49\x14\x3b\xb0\xab\xfc\x7e\x42\xbf\x83\x5f\x63\x98\x75\x75\xea\x42\x2a\xea\x39\x13\x9c\x82\xb0\xa6\xd3\x7a\x9d\x78\x33\x8e\xe3\xc6\x95\x5e\x7a\x66\xd9\xf5\xfc\x65\x9b\x32\x23\x8e\xcf\x2d\xd6\xf4\x9d\x66\xb3\x93\x0f\xab\x23\xa8\x0b\x5f\x96\x8a\x45\x7a\xa1\xa9\xf4\xfa\x3b\xbd\x99\xce\x5b\xbb\x74\xbf\x39\x70\x66\x87\x71\x15\x8c\x0b\xa9\xce\xcd\xcc\xd6\x9d\x43\x90\x98\x68\x22\x7d\x1f\xb0\xe3\xec\x68\x71\xca\x47\x21\x5a\xb8\x59\xb6\x8f\x0f\xb5\x86\x4f\xbf\x7c\xad\x42\x0a\x18\x4b\xa5\x43\x75\x79\x8c\xca\xc8\xb5\xeb\xd5\x4d\xc4\x74\x45\x56\x3a\x63\xa2\x01\x92\x27\xae\xba\xff\x24\xe3\x3a\x4b\xf1\x16\xce\x11\xaf\x06\xcf\x24\x69\xf5\xc1\xa7\x2c\x3a\xc6\xda\xfb\x74\x56\x18\x10\xf9\xdf\x0a\x66\xeb\x94\x9f\xb5\x72\x47\x6d\x29\x76\xb3\xd2\x3d\x54\x05\x50\xf1\xb6\x9d\xcb\x4a\x86\xf1\x4d\xde\x1a\xe6\x9f\x7b\xa6\x6f\xfc\x7f\x2f\xff\x1b\x00\x00\xff\xff\x04\xb0\xfd\x07\xbc\x03\x00\x00"

func server_csr_bytes() ([]byte, error) {
	return bindata_read(
		_server_csr,
		"server.csr",
	)
}

func server_csr() (*asset, error) {
	bytes, err := server_csr_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "server.csr", size: 956, mode: os.FileMode(420), modTime: time.Unix(1426797805, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _server_key = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x12\xa3\x60\x0e\x80\x7b\x9e\x62\x7b\xe6\x86\x6c\xa0\xd8\x02\x7e\x72\xce\xa9\x23\x98\x60\xc0\x44\x83\xe1\xe9\xcf\xb7\xf5\xa9\xd5\x48\xf3\x8d\x46\xd2\xf7\x9f\xff\x05\x2f\xca\xaa\xf5\xc7\xf3\xb9\x3f\x8e\xa7\x46\x5c\x20\xfe\xd1\xc5\xf4\x5f\x06\x32\x55\x55\x9c\x39\x95\xe7\x38\x1d\x70\xae\xc8\x1d\x34\xe1\xe3\x21\xb2\xb4\x00\x5d\x86\x09\x0b\x4d\xe1\xee\xdc\xfd\xaa\x95\x27\xbd\xc4\xa7\xd0\x7c\x31\x8f\x9b\xca\xfd\x74\x42\x22\x2a\xf2\x1b\x85\x86\x80\xf6\xe0\x05\x16\x45\xd2\x72\xc8\x59\xaa\x27\xfa\x06\x5b\xda\x89\x24\x60\x5e\x1f\x45\x04\x5b\x11\x35\x07\x61\x7d\x71\xd6\x60\x1c\x55\x23\x04\x64\xa0\x2c\x1a\x96\x32\xad\x97\x8f\x54\x5f\x20\x96\xed\x17\xf9\xd2\x9f\x79\x6a\x17\xc1\x3c\xaf\x33\x5c\xde\x4b\x4d\xe9\x9e\xd6\x85\xc9\xf9\x65\x7b\x91\x77\xa6\x38\x59\x07\x35\xee\x4d\x3b\xaa\x97\x93\x9d\x6a\x83\x78\x05\x87\x2c\xca\xd5\x7e\x41\x5e\x74\xe9\xc0\x8b\xde\xdd\x7d\x0e\x89\x14\x83\xee\xbc\xc3\xe0\xf1\xcc\x97\x36\x6d\xa8\x4a\xa4\xc5\xe7\xd6\xce\xb7\x26\xe6\x1a\xff\x59\x22\xd8\x9e\x62\xbd\x9d\x7a\xf6\xa3\x63\xcd\x97\x42\x33\x1d\x02\xc8\xe6\x46\x69\xd4\xbc\x1e\xc6\x05\x67\x9e\xd1\xe7\xed\x02\x4f\x85\x32\x06\x48\x05\x8c\x50\x5c\x5f\xc8\xc0\xfb\x56\x9f\x19\x94\xfc\x9b\xd4\x41\xc2\x2a\x21\x17\x51\x1c\xf1\x1e\x1f\x91\xa0\x87\x04\x5a\xc9\x1f\x8c\xa2\xde\x37\x72\x3d\x58\x82\x0a\x9f\x35\x16\xbf\x2b\xc3\x22\xcb\x17\x89\xa2\x85\x8e\xac\x6a\x75\xaa\x02\xe7\x72\x3c\x37\xfd\x5a\xb8\x00\x13\x5c\x32\xef\xf6\x47\x41\xbc\x53\x02\x4a\x4d\xb2\x92\xdf\x7c\x7d\x81\x7e\x75\xa8\x7b\x70\xf0\x86\x2b\xe0\xf5\x1e\x19\x30\x31\x63\x10\x9e\xed\x1a\x09\x83\x0d\x84\xaa\x82\xb9\x58\x7c\x7a\xc2\x8d\x7d\xa5\xf6\xcd\x99\xb7\x13\x60\x0e\x07\x65\x03\x7e\x50\x15\xbc\xf1\xec\xce\xb8\x45\xe6\x35\x86\xd3\x05\x8b\xab\xa7\xc7\x96\xe8\x89\x83\x93\xca\x22\x7d\x90\x5c\x8b\x3e\x5c\xa8\xc3\xee\xfa\xca\x1e\xa9\x54\x44\xa7\x08\x40\xbe\x5d\xde\x07\xda\x19\xb9\x3c\x51\x74\xbf\x97\x79\x75\x6c\x05\x95\x0a\x5d\xb1\x6d\x6a\x40\x89\xe3\x49\x4c\xda\xf3\x6c\x92\x6d\xae\x19\x86\x15\xd9\x68\xc1\xd4\xfc\xfe\x6d\xc4\xa3\x3f\x80\x3f\x7e\xd9\x58\x30\x26\xa8\x20\x9a\x97\x62\xd1\xe5\xc9\xb6\x6e\x5c\xb1\xea\x54\xda\xb4\x2c\xd9\x4f\x73\xcd\x56\x51\x1b\xc5\x51\x0f\x07\x65\x58\xaf\x95\x49\xb0\x22\x7a\xc3\xc4\xdd\x55\x46\xa1\x5c\xeb\x49\x60\x0e\xff\x25\xa1\xd7\x1a\x3a\xd8\xae\x1c\x6c\x76\x00\x75\xc6\xbf\x57\x5f\xd5\xbb\xa8\x68\x7d\x41\xa9\x28\xb5\xf2\x0d\x3d\x66\x72\xff\xbc\x29\x02\xed\x9d\x0d\xa1\x1a\x38\xed\x12\x97\xdc\x1f\xf6\xbd\xec\x4f\x47\x85\x0c\x12\xe9\xf7\x07\x49\x71\x93\xcc\x73\x0e\x8d\xa7\x35\xb3\x87\x40\xee\x60\x42\xd4\xa4\x39\xb3\xaf\x96\x71\xbb\x5f\xa1\x7c\x39\x9b\x6c\xc2\x41\xc3\xbb\xf7\x75\xfa\x01\x6a\x6b\x34\x76\xed\x32\xc4\x31\x6c\xf6\x72\xe3\x8c\x65\xdb\x97\x8d\x59\x27\x92\x54\x37\x26\x05\x9b\x54\xc7\x73\x43\xb2\xc5\x87\x99\x52\x4d\xc6\x01\x8f\xcb\x94\xa3\xf3\x31\x3e\x21\x30\x85\x7f\x0d\x14\x2b\x83\x5c\x86\x37\x68\xd1\x3c\x49\x1e\x2e\x8f\xc9\x35\xbf\x54\x60\x12\xf9\xdd\x12\x0a\xcc\xac\x9b\x91\x2f\xca\x53\x49\x98\x16\xa5\x9b\xf4\x72\x7b\x4b\x48\x32\x3f\x8f\x4e\xc1\x6a\x04\xf1\x8c\x7f\xc4\x26\x90\xa0\x1e\xd1\xa5\x8f\xe2\x9b\xed\xda\x3c\x69\x4f\x7d\x58\x0c\xb3\xf8\x1e\x4e\x48\x26\x80\x8d\x90\x70\x86\x41\x73\x9b\x9e\xe2\xdb\x96\x49\x08\x56\x68\x1f\x19\x88\x37\xa4\x35\x73\xb5\x58\x5d\x51\xc9\xa1\x38\xdd\xc9\x5a\x96\x85\x01\x29\xa2\x63\xf8\xe4\x9e\x50\x7c\x47\x90\xc0\x89\xa6\xc9\xbe\x1a\xbf\xbd\xd0\xbd\x11\xf1\xba\x7c\x40\x29\xec\x7a\xf9\x87\x71\x7e\x8a\xa6\x92\x0b\x93\x21\xb3\xde\xf6\xa0\xbd\x2b\xed\xaf\x08\x2c\x79\x7b\xd3\x57\x7d\x57\xe0\xec\x57\xf8\x0b\x2e\xc5\x32\xa3\x91\x8b\x5a\x52\x88\xae\xcd\xef\xa5\x1f\x32\x27\xb8\xfc\xbb\xfc\xbc\xed\xa9\x6f\xe9\xac\x51\xe1\x69\x86\x23\x88\x39\x3f\xf1\x43\xe3\xaa\x52\x90\x05\x78\x54\x2a\x13\x2c\x06\x5c\xbe\x15\xea\x0a\xa4\xd7\x4b\xaa\x30\x89\xb1\x57\x84\x3f\x45\x6f\xb5\xa3\xfc\x26\x12\x24\xd5\x35\x58\x7b\x68\x82\x31\x9e\x9a\x0e\x43\xf0\x36\x98\x69\x2f\x62\xf6\xd5\x49\x82\xc3\x35\x0f\xdf\x98\x5e\x2f\x86\x98\x4a\xb3\x1a\x7b\x4f\x3a\x94\x77\x3b\x8b\x46\x88\xe4\x9c\x3f\x6a\x82\xda\xb6\x68\x5f\x71\x89\x90\xd7\xa0\xc4\x7b\x86\x85\xc6\xaf\x80\x06\x65\x3c\x94\xa8\x4e\x35\x5d\x7e\xa7\xbe\x94\x2b\x0d\x0a\x9a\x94\x5b\xa9\x7e\xc4\x55\xb2\x36\x01\xcd\x6c\xb5\x2d\xf8\xda\xed\xf9\x8b\xa3\x08\x96\x75\x8e\xc3\x5d\xb0\xd9\xdd\x22\xd0\xad\x1d\x33\x22\x16\x94\xc8\x77\x99\x6e\xcf\x54\xf1\x74\x0a\x7c\xe6\x69\x13\x1f\x83\x71\xce\xdd\xe1\x7c\x49\x1b\x75\x06\x81\xfd\xa6\xed\x48\x0d\xf7\x50\x2b\x33\xd2\x41\xa3\x5d\xbb\x66\x4a\x11\x20\x9c\x2a\xcc\x6c\x58\x1d\x73\x1f\xcf\xac\x8f\x5e\x2a\x6d\xde\x56\x72\xe4\x9e\xae\x5a\x7c\x7f\x77\xf8\x77\x1b\x14\xb7\x7e\x7e\x3f\xfb\xa4\x24\xac\xfc\x01\xe0\x7d\xd7\xb1\xb8\xaa\x75\xb5\x0d\x8e\x05\x11\xc2\xa0\x35\xae\xce\x37\x2e\x20\xba\xc0\x33\x2d\x98\x9c\x7e\x7f\x69\xa7\xbd\x16\xdf\x92\x54\x8c\x0d\x2c\x33\x60\xc9\xf1\x0e\xf4\x19\x90\x9b\xc2\x9b\x8a\x0a\xa3\xb1\x4f\xd1\x5b\xae\xd8\x11\x0a\x71\xed\xf7\xf2\x31\xd2\xc2\x6a\xbc\x22\xa4\x89\x5e\x84\x54\x1e\x94\xee\x68\xe4\x51\x78\xd4\xef\x29\x57\x24\x1b\x1c\xda\x92\x8e\x4d\xc2\x94\x1d\x1e\x15\xe1\x62\xbf\xb7\xe7\x67\x2b\xc0\xd2\x98\x38\x44\x3b\x5a\x8e\x79\x64\x67\x8b\x5c\x10\x99\x2a\x6c\x85\xcc\x25\xf5\x9f\xc3\xae\x95\x61\x47\x30\x3d\xd5\x7c\x15\x7b\xc8\xfa\x64\x9d\xf3\x79\xcd\xcb\xf7\xd4\xee\xc0\xfd\xfb\x17\xfa\xa7\x15\xd1\x12\xfe\xbf\x6e\xfe\x1b\x00\x00\xff\xff\xb4\xf9\xaa\xd4\x8f\x06\x00\x00"

func server_key_bytes() ([]byte, error) {
	return bindata_read(
		_server_key,
		"server.key",
	)
}

func server_key() (*asset, error) {
	bytes, err := server_key_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "server.key", size: 1679, mode: os.FileMode(420), modTime: time.Unix(1426797798, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"server.crt": server_crt,
	"server.csr": server_csr,
	"server.key": server_key,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"server.crt": &_bintree_t{server_crt, map[string]*_bintree_t{
	}},
	"server.csr": &_bintree_t{server_csr, map[string]*_bintree_t{
	}},
	"server.key": &_bintree_t{server_key, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

